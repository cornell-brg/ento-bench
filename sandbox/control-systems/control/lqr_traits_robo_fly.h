#pragma once
#include <Eigen/Core>

struct RoboFlyLQRTraits {
  using Scalar = float;
  static constexpr int N = 10;
  static constexpr int M = 3;

  static constexpr Eigen::Matrix<float,10,10> Adyn = (Eigen::Matrix<float,10,10>() << 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 1.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 1.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 1.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 9.81000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, -9.81000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 1.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 1.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f).finished();
  static constexpr Eigen::Matrix<float,10,3> Bdyn = (Eigen::Matrix<float,10,3>() << 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 1.96987952e-01f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 1.53846154e+02f, 0.00000000e+00f, 0.00000000e+00f, 0.00000000e+00f, 3.70370370e+01f).finished();
  static constexpr Eigen::Matrix<float,3,10> K = (Eigen::Matrix<float,3,10>() << 5.19860493e-18f, 3.22258342e-17f, 7.07106781e-02f, 1.05212340e-17f, 3.82664816e-17f, 8.76309769e-01f, -2.92025044e-16f, 1.07376536e-16f, -8.39698462e-19f, 3.50200994e-17f, -4.57681180e-16f, -1.41421356e-01f, -1.98681293e-16f, -2.38147181e-15f, -4.78060910e-01f, -1.31159675e-15f, 4.45830583e+00f, -1.99325299e-14f, 2.01443738e+00f, -3.04275070e-15f, 1.41421356e-01f, -1.22613338e-16f, 1.83721676e-15f, 4.79498325e-01f, -2.73244158e-16f, 1.31687314e-14f, 3.89921525e-15f, 4.50604465e+00f, -7.32514057e-16f, 2.05993359e+00f).finished();
};
